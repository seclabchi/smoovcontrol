// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fmsmoov.proto

#include "fmsmoov.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace fmsmoov {
constexpr GainPair::GainPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : l_(0)
  , r_(0){}
struct GainPairDefaultTypeInternal {
  constexpr GainPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GainPairDefaultTypeInternal() {}
  union {
    GainPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GainPairDefaultTypeInternal _GainPair_default_instance_;
constexpr ProcessorLiveData::ProcessorLiveData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inl_(0)
  , inr_(0)
  , outl_(0)
  , outr_(0){}
struct ProcessorLiveDataDefaultTypeInternal {
  constexpr ProcessorLiveDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessorLiveDataDefaultTypeInternal() {}
  union {
    ProcessorLiveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessorLiveDataDefaultTypeInternal _ProcessorLiveData_default_instance_;
constexpr ShutdownCommand::ShutdownCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ShutdownCommandDefaultTypeInternal {
  constexpr ShutdownCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShutdownCommandDefaultTypeInternal() {}
  union {
    ShutdownCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShutdownCommandDefaultTypeInternal _ShutdownCommand_default_instance_;
constexpr ShutdownResponse::ShutdownResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(0)
{}
struct ShutdownResponseDefaultTypeInternal {
  constexpr ShutdownResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShutdownResponseDefaultTypeInternal() {}
  union {
    ShutdownResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
constexpr GainSetCommand::GainSetCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : which_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , _oneof_case_{}{}
struct GainSetCommandDefaultTypeInternal {
  constexpr GainSetCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GainSetCommandDefaultTypeInternal() {}
  union {
    GainSetCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GainSetCommandDefaultTypeInternal _GainSetCommand_default_instance_;
constexpr GainSetResponse::GainSetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(0)
{}
struct GainSetResponseDefaultTypeInternal {
  constexpr GainSetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GainSetResponseDefaultTypeInternal() {}
  union {
    GainSetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GainSetResponseDefaultTypeInternal _GainSetResponse_default_instance_;
constexpr GainGetCommand::GainGetCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : which_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GainGetCommandDefaultTypeInternal {
  constexpr GainGetCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GainGetCommandDefaultTypeInternal() {}
  union {
    GainGetCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GainGetCommandDefaultTypeInternal _GainGetCommand_default_instance_;
constexpr GainGetResponse::GainGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : which_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , _oneof_case_{}{}
struct GainGetResponseDefaultTypeInternal {
  constexpr GainGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GainGetResponseDefaultTypeInternal() {}
  union {
    GainGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GainGetResponseDefaultTypeInternal _GainGetResponse_default_instance_;
constexpr ProcessorCommand::ProcessorCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProcessorCommandDefaultTypeInternal {
  constexpr ProcessorCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessorCommandDefaultTypeInternal() {}
  union {
    ProcessorCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessorCommandDefaultTypeInternal _ProcessorCommand_default_instance_;
constexpr ProcessorResponse::ProcessorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(0)

  , _oneof_case_{}{}
struct ProcessorResponseDefaultTypeInternal {
  constexpr ProcessorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessorResponseDefaultTypeInternal() {}
  union {
    ProcessorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessorResponseDefaultTypeInternal _ProcessorResponse_default_instance_;
}  // namespace fmsmoov
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fmsmoov_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_fmsmoov_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fmsmoov_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fmsmoov_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainPair, l_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainPair, r_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorLiveData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorLiveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorLiveData, inl_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorLiveData, inr_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorLiveData, outl_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorLiveData, outr_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ShutdownCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ShutdownCommand, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ShutdownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ShutdownResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainSetCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainSetCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainSetCommand, which_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainSetCommand, type_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainSetCommand, gaintype_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainSetResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainGetCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainGetCommand, which_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainGetResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainGetResponse, which_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainGetResponse, type_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::GainGetResponse, gaintype_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorCommand, cmd_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorResponse, response_),
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorResponse, response_msg_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::fmsmoov::ProcessorResponse, rsp_oneof_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fmsmoov::GainPair)},
  { 7, 16, sizeof(::fmsmoov::ProcessorLiveData)},
  { 20, -1, sizeof(::fmsmoov::ShutdownCommand)},
  { 26, -1, sizeof(::fmsmoov::ShutdownResponse)},
  { 32, -1, sizeof(::fmsmoov::GainSetCommand)},
  { 42, -1, sizeof(::fmsmoov::GainSetResponse)},
  { 48, -1, sizeof(::fmsmoov::GainGetCommand)},
  { 54, -1, sizeof(::fmsmoov::GainGetResponse)},
  { 64, -1, sizeof(::fmsmoov::ProcessorCommand)},
  { 73, -1, sizeof(::fmsmoov::ProcessorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_GainPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_ProcessorLiveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_ShutdownCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_ShutdownResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_GainSetCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_GainSetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_GainGetCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_GainGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_ProcessorCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fmsmoov::_ProcessorResponse_default_instance_),
};

const char descriptor_table_protodef_fmsmoov_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rfmsmoov.proto\022\007fmsmoov\" \n\010GainPair\022\t\n\001"
  "l\030\001 \001(\002\022\t\n\001r\030\002 \001(\002\"\177\n\021ProcessorLiveData\022"
  "\020\n\003inL\030\001 \001(\002H\000\210\001\001\022\020\n\003inR\030\002 \001(\002H\001\210\001\001\022\021\n\004o"
  "utL\030\003 \001(\002H\002\210\001\001\022\021\n\004outR\030\004 \001(\002H\003\210\001\001B\006\n\004_in"
  "LB\006\n\004_inRB\007\n\005_outLB\007\n\005_outR\"!\n\017ShutdownC"
  "ommand\022\016\n\006reason\030\001 \001(\t\";\n\020ShutdownRespon"
  "se\022\'\n\010response\030\001 \001(\0162\025.fmsmoov.ResponseC"
  "ode\"\212\001\n\016GainSetCommand\022\r\n\005which\030\001 \001(\t\022&\n"
  "\tgain_pair\030\002 \001(\0132\021.fmsmoov.GainPairH\000\022\016\n"
  "\004gain\030\003 \001(\002H\000\022\037\n\004type\030\004 \001(\0162\021.fmsmoov.Ga"
  "inTypeB\020\n\016gaintype_oneof\":\n\017GainSetRespo"
  "nse\022\'\n\010response\030\001 \001(\0162\025.fmsmoov.Response"
  "Code\"\037\n\016GainGetCommand\022\r\n\005which\030\001 \001(\t\"\213\001"
  "\n\017GainGetResponse\022\r\n\005which\030\001 \001(\t\022&\n\tgain"
  "_pair\030\002 \001(\0132\021.fmsmoov.GainPairH\000\022\016\n\004gain"
  "\030\003 \001(\002H\000\022\037\n\004type\030\004 \001(\0162\021.fmsmoov.GainTyp"
  "eB\020\n\016gaintype_oneof\"\247\001\n\020ProcessorCommand"
  "\022,\n\010shutdown\030\001 \001(\0132\030.fmsmoov.ShutdownCom"
  "mandH\000\022+\n\010gain_set\030\002 \001(\0132\027.fmsmoov.GainS"
  "etCommandH\000\022+\n\010gain_get\030\003 \001(\0132\027.fmsmoov."
  "GainGetCommandH\000B\013\n\tcmd_oneof\"\352\001\n\021Proces"
  "sorResponse\022\'\n\010response\030\001 \001(\0162\025.fmsmoov."
  "ResponseCode\022\024\n\014response_msg\030\002 \001(\t\022-\n\010sh"
  "utdown\030\003 \001(\0132\031.fmsmoov.ShutdownResponseH"
  "\000\022,\n\010gain_set\030\004 \001(\0132\030.fmsmoov.GainSetRes"
  "ponseH\000\022,\n\010gain_get\030\005 \001(\0132\030.fmsmoov.Gain"
  "GetResponseH\000B\013\n\trsp_oneof*\037\n\010GainType\022\n"
  "\n\006LINEAR\020\000\022\007\n\003LOG\020\001*!\n\014ResponseCode\022\006\n\002O"
  "K\020\000\022\t\n\005ERROR\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fmsmoov_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fmsmoov_2eproto = {
  false, false, 1142, descriptor_table_protodef_fmsmoov_2eproto, "fmsmoov.proto", 
  &descriptor_table_fmsmoov_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_fmsmoov_2eproto::offsets,
  file_level_metadata_fmsmoov_2eproto, file_level_enum_descriptors_fmsmoov_2eproto, file_level_service_descriptors_fmsmoov_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_fmsmoov_2eproto_getter() {
  return &descriptor_table_fmsmoov_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_fmsmoov_2eproto(&descriptor_table_fmsmoov_2eproto);
namespace fmsmoov {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GainType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fmsmoov_2eproto);
  return file_level_enum_descriptors_fmsmoov_2eproto[0];
}
bool GainType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fmsmoov_2eproto);
  return file_level_enum_descriptors_fmsmoov_2eproto[1];
}
bool ResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GainPair::_Internal {
 public:
};

GainPair::GainPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.GainPair)
}
GainPair::GainPair(const GainPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&l_, &from.l_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&l_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainPair)
}

inline void GainPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&l_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&l_)) + sizeof(r_));
}

GainPair::~GainPair() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GainPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GainPair::ArenaDtor(void* object) {
  GainPair* _this = reinterpret_cast< GainPair* >(object);
  (void)_this;
}
void GainPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GainPair::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&l_)) + sizeof(r_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float l = 1;
  if (!(this->_internal_l() <= 0 && this->_internal_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_l(), target);
  }

  // float r = 2;
  if (!(this->_internal_r() <= 0 && this->_internal_r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainPair)
  return target;
}

size_t GainPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float l = 1;
  if (!(this->_internal_l() <= 0 && this->_internal_l() >= 0)) {
    total_size += 1 + 4;
  }

  // float r = 2;
  if (!(this->_internal_r() <= 0 && this->_internal_r() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GainPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GainPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GainPair::GetClassData() const { return &_class_data_; }

void GainPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GainPair *>(to)->MergeFrom(
      static_cast<const GainPair &>(from));
}


void GainPair::MergeFrom(const GainPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_l() <= 0 && from._internal_l() >= 0)) {
    _internal_set_l(from._internal_l());
  }
  if (!(from._internal_r() <= 0 && from._internal_r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GainPair::CopyFrom(const GainPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainPair::IsInitialized() const {
  return true;
}

void GainPair::InternalSwap(GainPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GainPair, r_)
      + sizeof(GainPair::r_)
      - PROTOBUF_FIELD_OFFSET(GainPair, l_)>(
          reinterpret_cast<char*>(&l_),
          reinterpret_cast<char*>(&other->l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GainPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[0]);
}

// ===================================================================

class ProcessorLiveData::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessorLiveData>()._has_bits_);
  static void set_has_inl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_outl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_outr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ProcessorLiveData::ProcessorLiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.ProcessorLiveData)
}
ProcessorLiveData::ProcessorLiveData(const ProcessorLiveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inl_, &from.inl_,
    static_cast<size_t>(reinterpret_cast<char*>(&outr_) -
    reinterpret_cast<char*>(&inl_)) + sizeof(outr_));
  // @@protoc_insertion_point(copy_constructor:fmsmoov.ProcessorLiveData)
}

inline void ProcessorLiveData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&outr_) -
    reinterpret_cast<char*>(&inl_)) + sizeof(outr_));
}

ProcessorLiveData::~ProcessorLiveData() {
  // @@protoc_insertion_point(destructor:fmsmoov.ProcessorLiveData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessorLiveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcessorLiveData::ArenaDtor(void* object) {
  ProcessorLiveData* _this = reinterpret_cast< ProcessorLiveData* >(object);
  (void)_this;
}
void ProcessorLiveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessorLiveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessorLiveData::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.ProcessorLiveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&inl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&outr_) -
        reinterpret_cast<char*>(&inl_)) + sizeof(outr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessorLiveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float inL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_inl(&has_bits);
          inl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_inr(&has_bits);
          inr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float outL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_outl(&has_bits);
          outl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float outR = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_outr(&has_bits);
          outr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorLiveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.ProcessorLiveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float inL = 1;
  if (_internal_has_inl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_inl(), target);
  }

  // optional float inR = 2;
  if (_internal_has_inr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_inr(), target);
  }

  // optional float outL = 3;
  if (_internal_has_outl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_outl(), target);
  }

  // optional float outR = 4;
  if (_internal_has_outr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_outr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.ProcessorLiveData)
  return target;
}

size_t ProcessorLiveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.ProcessorLiveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float inL = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float inR = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float outL = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float outR = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessorLiveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessorLiveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessorLiveData::GetClassData() const { return &_class_data_; }

void ProcessorLiveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessorLiveData *>(to)->MergeFrom(
      static_cast<const ProcessorLiveData &>(from));
}


void ProcessorLiveData::MergeFrom(const ProcessorLiveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.ProcessorLiveData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      inl_ = from.inl_;
    }
    if (cached_has_bits & 0x00000002u) {
      inr_ = from.inr_;
    }
    if (cached_has_bits & 0x00000004u) {
      outl_ = from.outl_;
    }
    if (cached_has_bits & 0x00000008u) {
      outr_ = from.outr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessorLiveData::CopyFrom(const ProcessorLiveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.ProcessorLiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorLiveData::IsInitialized() const {
  return true;
}

void ProcessorLiveData::InternalSwap(ProcessorLiveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessorLiveData, outr_)
      + sizeof(ProcessorLiveData::outr_)
      - PROTOBUF_FIELD_OFFSET(ProcessorLiveData, inl_)>(
          reinterpret_cast<char*>(&inl_),
          reinterpret_cast<char*>(&other->inl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorLiveData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[1]);
}

// ===================================================================

class ShutdownCommand::_Internal {
 public:
};

ShutdownCommand::ShutdownCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.ShutdownCommand)
}
ShutdownCommand::ShutdownCommand(const ShutdownCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.ShutdownCommand)
}

inline void ShutdownCommand::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShutdownCommand::~ShutdownCommand() {
  // @@protoc_insertion_point(destructor:fmsmoov.ShutdownCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShutdownCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShutdownCommand::ArenaDtor(void* object) {
  ShutdownCommand* _this = reinterpret_cast< ShutdownCommand* >(object);
  (void)_this;
}
void ShutdownCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShutdownCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.ShutdownCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fmsmoov.ShutdownCommand.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.ShutdownCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.ShutdownCommand.reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.ShutdownCommand)
  return target;
}

size_t ShutdownCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.ShutdownCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 1;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShutdownCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownCommand::GetClassData() const { return &_class_data_; }

void ShutdownCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShutdownCommand *>(to)->MergeFrom(
      static_cast<const ShutdownCommand &>(from));
}


void ShutdownCommand::MergeFrom(const ShutdownCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.ShutdownCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _internal_set_reason(from._internal_reason());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShutdownCommand::CopyFrom(const ShutdownCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.ShutdownCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownCommand::IsInitialized() const {
  return true;
}

void ShutdownCommand::InternalSwap(ShutdownCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reason_, GetArenaForAllocation(),
      &other->reason_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[2]);
}

// ===================================================================

class ShutdownResponse::_Internal {
 public:
};

ShutdownResponse::ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.ShutdownResponse)
}
ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:fmsmoov.ShutdownResponse)
}

inline void ShutdownResponse::SharedCtor() {
response_ = 0;
}

ShutdownResponse::~ShutdownResponse() {
  // @@protoc_insertion_point(destructor:fmsmoov.ShutdownResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShutdownResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShutdownResponse::ArenaDtor(void* object) {
  ShutdownResponse* _this = reinterpret_cast< ShutdownResponse* >(object);
  (void)_this;
}
void ShutdownResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShutdownResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.ShutdownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fmsmoov.ResponseCode response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::fmsmoov::ResponseCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.ShutdownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->_internal_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.ShutdownResponse)
  return target;
}

size_t ShutdownResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.ShutdownResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->_internal_response() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShutdownResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownResponse::GetClassData() const { return &_class_data_; }

void ShutdownResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShutdownResponse *>(to)->MergeFrom(
      static_cast<const ShutdownResponse &>(from));
}


void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.ShutdownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_response() != 0) {
    _internal_set_response(from._internal_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.ShutdownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {
  return true;
}

void ShutdownResponse::InternalSwap(ShutdownResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[3]);
}

// ===================================================================

class GainSetCommand::_Internal {
 public:
  static const ::fmsmoov::GainPair& gain_pair(const GainSetCommand* msg);
};

const ::fmsmoov::GainPair&
GainSetCommand::_Internal::gain_pair(const GainSetCommand* msg) {
  return *msg->gaintype_oneof_.gain_pair_;
}
void GainSetCommand::set_allocated_gain_pair(::fmsmoov::GainPair* gain_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_gaintype_oneof();
  if (gain_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fmsmoov::GainPair>::GetOwningArena(gain_pair);
    if (message_arena != submessage_arena) {
      gain_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_pair, submessage_arena);
    }
    set_has_gain_pair();
    gaintype_oneof_.gain_pair_ = gain_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.GainSetCommand.gain_pair)
}
GainSetCommand::GainSetCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.GainSetCommand)
}
GainSetCommand::GainSetCommand(const GainSetCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  which_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_which().empty()) {
    which_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_which(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  clear_has_gaintype_oneof();
  switch (from.gaintype_oneof_case()) {
    case kGainPair: {
      _internal_mutable_gain_pair()->::fmsmoov::GainPair::MergeFrom(from._internal_gain_pair());
      break;
    }
    case kGain: {
      _internal_set_gain(from._internal_gain());
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainSetCommand)
}

inline void GainSetCommand::SharedCtor() {
which_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
clear_has_gaintype_oneof();
}

GainSetCommand::~GainSetCommand() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainSetCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GainSetCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  which_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_gaintype_oneof()) {
    clear_gaintype_oneof();
  }
}

void GainSetCommand::ArenaDtor(void* object) {
  GainSetCommand* _this = reinterpret_cast< GainSetCommand* >(object);
  (void)_this;
}
void GainSetCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainSetCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GainSetCommand::clear_gaintype_oneof() {
// @@protoc_insertion_point(one_of_clear_start:fmsmoov.GainSetCommand)
  switch (gaintype_oneof_case()) {
    case kGainPair: {
      if (GetArenaForAllocation() == nullptr) {
        delete gaintype_oneof_.gain_pair_;
      }
      break;
    }
    case kGain: {
      // No need to clear
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GAINTYPE_ONEOF_NOT_SET;
}


void GainSetCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainSetCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  which_.ClearToEmpty();
  type_ = 0;
  clear_gaintype_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainSetCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string which = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_which();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fmsmoov.GainSetCommand.which"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.GainPair gain_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.GainType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::fmsmoov::GainType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainSetCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainSetCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (!this->_internal_which().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_which().data(), static_cast<int>(this->_internal_which().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainSetCommand.which");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_which(), target);
  }

  // .fmsmoov.GainPair gain_pair = 2;
  if (_internal_has_gain_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gain_pair(this), target, stream);
  }

  // float gain = 3;
  if (_internal_has_gain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_gain(), target);
  }

  // .fmsmoov.GainType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainSetCommand)
  return target;
}

size_t GainSetCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainSetCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string which = 1;
  if (!this->_internal_which().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_which());
  }

  // .fmsmoov.GainType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (gaintype_oneof_case()) {
    // .fmsmoov.GainPair gain_pair = 2;
    case kGainPair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gaintype_oneof_.gain_pair_);
      break;
    }
    // float gain = 3;
    case kGain: {
      total_size += 1 + 4;
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GainSetCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GainSetCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GainSetCommand::GetClassData() const { return &_class_data_; }

void GainSetCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GainSetCommand *>(to)->MergeFrom(
      static_cast<const GainSetCommand &>(from));
}


void GainSetCommand::MergeFrom(const GainSetCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainSetCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_which().empty()) {
    _internal_set_which(from._internal_which());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.gaintype_oneof_case()) {
    case kGainPair: {
      _internal_mutable_gain_pair()->::fmsmoov::GainPair::MergeFrom(from._internal_gain_pair());
      break;
    }
    case kGain: {
      _internal_set_gain(from._internal_gain());
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GainSetCommand::CopyFrom(const GainSetCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainSetCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSetCommand::IsInitialized() const {
  return true;
}

void GainSetCommand::InternalSwap(GainSetCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &which_, GetArenaForAllocation(),
      &other->which_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
  swap(gaintype_oneof_, other->gaintype_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GainSetCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[4]);
}

// ===================================================================

class GainSetResponse::_Internal {
 public:
};

GainSetResponse::GainSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.GainSetResponse)
}
GainSetResponse::GainSetResponse(const GainSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainSetResponse)
}

inline void GainSetResponse::SharedCtor() {
response_ = 0;
}

GainSetResponse::~GainSetResponse() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainSetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GainSetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GainSetResponse::ArenaDtor(void* object) {
  GainSetResponse* _this = reinterpret_cast< GainSetResponse* >(object);
  (void)_this;
}
void GainSetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GainSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainSetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fmsmoov.ResponseCode response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::fmsmoov::ResponseCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainSetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->_internal_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainSetResponse)
  return target;
}

size_t GainSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainSetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->_internal_response() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GainSetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GainSetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GainSetResponse::GetClassData() const { return &_class_data_; }

void GainSetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GainSetResponse *>(to)->MergeFrom(
      static_cast<const GainSetResponse &>(from));
}


void GainSetResponse::MergeFrom(const GainSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_response() != 0) {
    _internal_set_response(from._internal_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GainSetResponse::CopyFrom(const GainSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSetResponse::IsInitialized() const {
  return true;
}

void GainSetResponse::InternalSwap(GainSetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GainSetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[5]);
}

// ===================================================================

class GainGetCommand::_Internal {
 public:
};

GainGetCommand::GainGetCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.GainGetCommand)
}
GainGetCommand::GainGetCommand(const GainGetCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  which_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_which().empty()) {
    which_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_which(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainGetCommand)
}

inline void GainGetCommand::SharedCtor() {
which_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GainGetCommand::~GainGetCommand() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainGetCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GainGetCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  which_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GainGetCommand::ArenaDtor(void* object) {
  GainGetCommand* _this = reinterpret_cast< GainGetCommand* >(object);
  (void)_this;
}
void GainGetCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainGetCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GainGetCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainGetCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  which_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainGetCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string which = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_which();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fmsmoov.GainGetCommand.which"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainGetCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainGetCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (!this->_internal_which().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_which().data(), static_cast<int>(this->_internal_which().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainGetCommand.which");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_which(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainGetCommand)
  return target;
}

size_t GainGetCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainGetCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string which = 1;
  if (!this->_internal_which().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_which());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GainGetCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GainGetCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GainGetCommand::GetClassData() const { return &_class_data_; }

void GainGetCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GainGetCommand *>(to)->MergeFrom(
      static_cast<const GainGetCommand &>(from));
}


void GainGetCommand::MergeFrom(const GainGetCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainGetCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_which().empty()) {
    _internal_set_which(from._internal_which());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GainGetCommand::CopyFrom(const GainGetCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainGetCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainGetCommand::IsInitialized() const {
  return true;
}

void GainGetCommand::InternalSwap(GainGetCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &which_, GetArenaForAllocation(),
      &other->which_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GainGetCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[6]);
}

// ===================================================================

class GainGetResponse::_Internal {
 public:
  static const ::fmsmoov::GainPair& gain_pair(const GainGetResponse* msg);
};

const ::fmsmoov::GainPair&
GainGetResponse::_Internal::gain_pair(const GainGetResponse* msg) {
  return *msg->gaintype_oneof_.gain_pair_;
}
void GainGetResponse::set_allocated_gain_pair(::fmsmoov::GainPair* gain_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_gaintype_oneof();
  if (gain_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fmsmoov::GainPair>::GetOwningArena(gain_pair);
    if (message_arena != submessage_arena) {
      gain_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_pair, submessage_arena);
    }
    set_has_gain_pair();
    gaintype_oneof_.gain_pair_ = gain_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.GainGetResponse.gain_pair)
}
GainGetResponse::GainGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.GainGetResponse)
}
GainGetResponse::GainGetResponse(const GainGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  which_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_which().empty()) {
    which_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_which(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  clear_has_gaintype_oneof();
  switch (from.gaintype_oneof_case()) {
    case kGainPair: {
      _internal_mutable_gain_pair()->::fmsmoov::GainPair::MergeFrom(from._internal_gain_pair());
      break;
    }
    case kGain: {
      _internal_set_gain(from._internal_gain());
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.GainGetResponse)
}

inline void GainGetResponse::SharedCtor() {
which_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
clear_has_gaintype_oneof();
}

GainGetResponse::~GainGetResponse() {
  // @@protoc_insertion_point(destructor:fmsmoov.GainGetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GainGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  which_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_gaintype_oneof()) {
    clear_gaintype_oneof();
  }
}

void GainGetResponse::ArenaDtor(void* object) {
  GainGetResponse* _this = reinterpret_cast< GainGetResponse* >(object);
  (void)_this;
}
void GainGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GainGetResponse::clear_gaintype_oneof() {
// @@protoc_insertion_point(one_of_clear_start:fmsmoov.GainGetResponse)
  switch (gaintype_oneof_case()) {
    case kGainPair: {
      if (GetArenaForAllocation() == nullptr) {
        delete gaintype_oneof_.gain_pair_;
      }
      break;
    }
    case kGain: {
      // No need to clear
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GAINTYPE_ONEOF_NOT_SET;
}


void GainGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.GainGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  which_.ClearToEmpty();
  type_ = 0;
  clear_gaintype_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string which = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_which();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fmsmoov.GainGetResponse.which"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.GainPair gain_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.GainType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::fmsmoov::GainType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainGetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.GainGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string which = 1;
  if (!this->_internal_which().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_which().data(), static_cast<int>(this->_internal_which().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.GainGetResponse.which");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_which(), target);
  }

  // .fmsmoov.GainPair gain_pair = 2;
  if (_internal_has_gain_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gain_pair(this), target, stream);
  }

  // float gain = 3;
  if (_internal_has_gain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_gain(), target);
  }

  // .fmsmoov.GainType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.GainGetResponse)
  return target;
}

size_t GainGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.GainGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string which = 1;
  if (!this->_internal_which().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_which());
  }

  // .fmsmoov.GainType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (gaintype_oneof_case()) {
    // .fmsmoov.GainPair gain_pair = 2;
    case kGainPair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gaintype_oneof_.gain_pair_);
      break;
    }
    // float gain = 3;
    case kGain: {
      total_size += 1 + 4;
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GainGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GainGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GainGetResponse::GetClassData() const { return &_class_data_; }

void GainGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GainGetResponse *>(to)->MergeFrom(
      static_cast<const GainGetResponse &>(from));
}


void GainGetResponse::MergeFrom(const GainGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.GainGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_which().empty()) {
    _internal_set_which(from._internal_which());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.gaintype_oneof_case()) {
    case kGainPair: {
      _internal_mutable_gain_pair()->::fmsmoov::GainPair::MergeFrom(from._internal_gain_pair());
      break;
    }
    case kGain: {
      _internal_set_gain(from._internal_gain());
      break;
    }
    case GAINTYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GainGetResponse::CopyFrom(const GainGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.GainGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainGetResponse::IsInitialized() const {
  return true;
}

void GainGetResponse::InternalSwap(GainGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &which_, GetArenaForAllocation(),
      &other->which_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
  swap(gaintype_oneof_, other->gaintype_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GainGetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[7]);
}

// ===================================================================

class ProcessorCommand::_Internal {
 public:
  static const ::fmsmoov::ShutdownCommand& shutdown(const ProcessorCommand* msg);
  static const ::fmsmoov::GainSetCommand& gain_set(const ProcessorCommand* msg);
  static const ::fmsmoov::GainGetCommand& gain_get(const ProcessorCommand* msg);
};

const ::fmsmoov::ShutdownCommand&
ProcessorCommand::_Internal::shutdown(const ProcessorCommand* msg) {
  return *msg->cmd_oneof_.shutdown_;
}
const ::fmsmoov::GainSetCommand&
ProcessorCommand::_Internal::gain_set(const ProcessorCommand* msg) {
  return *msg->cmd_oneof_.gain_set_;
}
const ::fmsmoov::GainGetCommand&
ProcessorCommand::_Internal::gain_get(const ProcessorCommand* msg) {
  return *msg->cmd_oneof_.gain_get_;
}
void ProcessorCommand::set_allocated_shutdown(::fmsmoov::ShutdownCommand* shutdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd_oneof();
  if (shutdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fmsmoov::ShutdownCommand>::GetOwningArena(shutdown);
    if (message_arena != submessage_arena) {
      shutdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shutdown, submessage_arena);
    }
    set_has_shutdown();
    cmd_oneof_.shutdown_ = shutdown;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorCommand.shutdown)
}
void ProcessorCommand::set_allocated_gain_set(::fmsmoov::GainSetCommand* gain_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd_oneof();
  if (gain_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fmsmoov::GainSetCommand>::GetOwningArena(gain_set);
    if (message_arena != submessage_arena) {
      gain_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_set, submessage_arena);
    }
    set_has_gain_set();
    cmd_oneof_.gain_set_ = gain_set;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorCommand.gain_set)
}
void ProcessorCommand::set_allocated_gain_get(::fmsmoov::GainGetCommand* gain_get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd_oneof();
  if (gain_get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fmsmoov::GainGetCommand>::GetOwningArena(gain_get);
    if (message_arena != submessage_arena) {
      gain_get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_get, submessage_arena);
    }
    set_has_gain_get();
    cmd_oneof_.gain_get_ = gain_get;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorCommand.gain_get)
}
ProcessorCommand::ProcessorCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.ProcessorCommand)
}
ProcessorCommand::ProcessorCommand(const ProcessorCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_cmd_oneof();
  switch (from.cmd_oneof_case()) {
    case kShutdown: {
      _internal_mutable_shutdown()->::fmsmoov::ShutdownCommand::MergeFrom(from._internal_shutdown());
      break;
    }
    case kGainSet: {
      _internal_mutable_gain_set()->::fmsmoov::GainSetCommand::MergeFrom(from._internal_gain_set());
      break;
    }
    case kGainGet: {
      _internal_mutable_gain_get()->::fmsmoov::GainGetCommand::MergeFrom(from._internal_gain_get());
      break;
    }
    case CMD_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.ProcessorCommand)
}

inline void ProcessorCommand::SharedCtor() {
clear_has_cmd_oneof();
}

ProcessorCommand::~ProcessorCommand() {
  // @@protoc_insertion_point(destructor:fmsmoov.ProcessorCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessorCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_cmd_oneof()) {
    clear_cmd_oneof();
  }
}

void ProcessorCommand::ArenaDtor(void* object) {
  ProcessorCommand* _this = reinterpret_cast< ProcessorCommand* >(object);
  (void)_this;
}
void ProcessorCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessorCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessorCommand::clear_cmd_oneof() {
// @@protoc_insertion_point(one_of_clear_start:fmsmoov.ProcessorCommand)
  switch (cmd_oneof_case()) {
    case kShutdown: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_oneof_.shutdown_;
      }
      break;
    }
    case kGainSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_oneof_.gain_set_;
      }
      break;
    }
    case kGainGet: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_oneof_.gain_get_;
      }
      break;
    }
    case CMD_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CMD_ONEOF_NOT_SET;
}


void ProcessorCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.ProcessorCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_cmd_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessorCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fmsmoov.ShutdownCommand shutdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shutdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.GainSetCommand gain_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.GainGetCommand gain_get = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.ProcessorCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.ShutdownCommand shutdown = 1;
  if (_internal_has_shutdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shutdown(this), target, stream);
  }

  // .fmsmoov.GainSetCommand gain_set = 2;
  if (_internal_has_gain_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gain_set(this), target, stream);
  }

  // .fmsmoov.GainGetCommand gain_get = 3;
  if (_internal_has_gain_get()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gain_get(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.ProcessorCommand)
  return target;
}

size_t ProcessorCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.ProcessorCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (cmd_oneof_case()) {
    // .fmsmoov.ShutdownCommand shutdown = 1;
    case kShutdown: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_oneof_.shutdown_);
      break;
    }
    // .fmsmoov.GainSetCommand gain_set = 2;
    case kGainSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_oneof_.gain_set_);
      break;
    }
    // .fmsmoov.GainGetCommand gain_get = 3;
    case kGainGet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_oneof_.gain_get_);
      break;
    }
    case CMD_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessorCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessorCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessorCommand::GetClassData() const { return &_class_data_; }

void ProcessorCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessorCommand *>(to)->MergeFrom(
      static_cast<const ProcessorCommand &>(from));
}


void ProcessorCommand::MergeFrom(const ProcessorCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.ProcessorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.cmd_oneof_case()) {
    case kShutdown: {
      _internal_mutable_shutdown()->::fmsmoov::ShutdownCommand::MergeFrom(from._internal_shutdown());
      break;
    }
    case kGainSet: {
      _internal_mutable_gain_set()->::fmsmoov::GainSetCommand::MergeFrom(from._internal_gain_set());
      break;
    }
    case kGainGet: {
      _internal_mutable_gain_get()->::fmsmoov::GainGetCommand::MergeFrom(from._internal_gain_get());
      break;
    }
    case CMD_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessorCommand::CopyFrom(const ProcessorCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.ProcessorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorCommand::IsInitialized() const {
  return true;
}

void ProcessorCommand::InternalSwap(ProcessorCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cmd_oneof_, other->cmd_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[8]);
}

// ===================================================================

class ProcessorResponse::_Internal {
 public:
  static const ::fmsmoov::ShutdownResponse& shutdown(const ProcessorResponse* msg);
  static const ::fmsmoov::GainSetResponse& gain_set(const ProcessorResponse* msg);
  static const ::fmsmoov::GainGetResponse& gain_get(const ProcessorResponse* msg);
};

const ::fmsmoov::ShutdownResponse&
ProcessorResponse::_Internal::shutdown(const ProcessorResponse* msg) {
  return *msg->rsp_oneof_.shutdown_;
}
const ::fmsmoov::GainSetResponse&
ProcessorResponse::_Internal::gain_set(const ProcessorResponse* msg) {
  return *msg->rsp_oneof_.gain_set_;
}
const ::fmsmoov::GainGetResponse&
ProcessorResponse::_Internal::gain_get(const ProcessorResponse* msg) {
  return *msg->rsp_oneof_.gain_get_;
}
void ProcessorResponse::set_allocated_shutdown(::fmsmoov::ShutdownResponse* shutdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rsp_oneof();
  if (shutdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fmsmoov::ShutdownResponse>::GetOwningArena(shutdown);
    if (message_arena != submessage_arena) {
      shutdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shutdown, submessage_arena);
    }
    set_has_shutdown();
    rsp_oneof_.shutdown_ = shutdown;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorResponse.shutdown)
}
void ProcessorResponse::set_allocated_gain_set(::fmsmoov::GainSetResponse* gain_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rsp_oneof();
  if (gain_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fmsmoov::GainSetResponse>::GetOwningArena(gain_set);
    if (message_arena != submessage_arena) {
      gain_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_set, submessage_arena);
    }
    set_has_gain_set();
    rsp_oneof_.gain_set_ = gain_set;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorResponse.gain_set)
}
void ProcessorResponse::set_allocated_gain_get(::fmsmoov::GainGetResponse* gain_get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rsp_oneof();
  if (gain_get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fmsmoov::GainGetResponse>::GetOwningArena(gain_get);
    if (message_arena != submessage_arena) {
      gain_get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_get, submessage_arena);
    }
    set_has_gain_get();
    rsp_oneof_.gain_get_ = gain_get;
  }
  // @@protoc_insertion_point(field_set_allocated:fmsmoov.ProcessorResponse.gain_get)
}
ProcessorResponse::ProcessorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fmsmoov.ProcessorResponse)
}
ProcessorResponse::ProcessorResponse(const ProcessorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_msg().empty()) {
    response_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response_msg(), 
      GetArenaForAllocation());
  }
  response_ = from.response_;
  clear_has_rsp_oneof();
  switch (from.rsp_oneof_case()) {
    case kShutdown: {
      _internal_mutable_shutdown()->::fmsmoov::ShutdownResponse::MergeFrom(from._internal_shutdown());
      break;
    }
    case kGainSet: {
      _internal_mutable_gain_set()->::fmsmoov::GainSetResponse::MergeFrom(from._internal_gain_set());
      break;
    }
    case kGainGet: {
      _internal_mutable_gain_get()->::fmsmoov::GainGetResponse::MergeFrom(from._internal_gain_get());
      break;
    }
    case RSP_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fmsmoov.ProcessorResponse)
}

inline void ProcessorResponse::SharedCtor() {
response_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
response_ = 0;
clear_has_rsp_oneof();
}

ProcessorResponse::~ProcessorResponse() {
  // @@protoc_insertion_point(destructor:fmsmoov.ProcessorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  response_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_rsp_oneof()) {
    clear_rsp_oneof();
  }
}

void ProcessorResponse::ArenaDtor(void* object) {
  ProcessorResponse* _this = reinterpret_cast< ProcessorResponse* >(object);
  (void)_this;
}
void ProcessorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessorResponse::clear_rsp_oneof() {
// @@protoc_insertion_point(one_of_clear_start:fmsmoov.ProcessorResponse)
  switch (rsp_oneof_case()) {
    case kShutdown: {
      if (GetArenaForAllocation() == nullptr) {
        delete rsp_oneof_.shutdown_;
      }
      break;
    }
    case kGainSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete rsp_oneof_.gain_set_;
      }
      break;
    }
    case kGainGet: {
      if (GetArenaForAllocation() == nullptr) {
        delete rsp_oneof_.gain_get_;
      }
      break;
    }
    case RSP_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RSP_ONEOF_NOT_SET;
}


void ProcessorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fmsmoov.ProcessorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_msg_.ClearToEmpty();
  response_ = 0;
  clear_rsp_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fmsmoov.ResponseCode response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::fmsmoov::ResponseCode>(val));
        } else goto handle_unusual;
        continue;
      // string response_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_response_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fmsmoov.ProcessorResponse.response_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.ShutdownResponse shutdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shutdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.GainSetResponse gain_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fmsmoov.GainGetResponse gain_get = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fmsmoov.ProcessorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fmsmoov.ResponseCode response = 1;
  if (this->_internal_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // string response_msg = 2;
  if (!this->_internal_response_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_msg().data(), static_cast<int>(this->_internal_response_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fmsmoov.ProcessorResponse.response_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response_msg(), target);
  }

  // .fmsmoov.ShutdownResponse shutdown = 3;
  if (_internal_has_shutdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shutdown(this), target, stream);
  }

  // .fmsmoov.GainSetResponse gain_set = 4;
  if (_internal_has_gain_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gain_set(this), target, stream);
  }

  // .fmsmoov.GainGetResponse gain_get = 5;
  if (_internal_has_gain_get()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gain_get(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fmsmoov.ProcessorResponse)
  return target;
}

size_t ProcessorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fmsmoov.ProcessorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_msg = 2;
  if (!this->_internal_response_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_msg());
  }

  // .fmsmoov.ResponseCode response = 1;
  if (this->_internal_response() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  switch (rsp_oneof_case()) {
    // .fmsmoov.ShutdownResponse shutdown = 3;
    case kShutdown: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsp_oneof_.shutdown_);
      break;
    }
    // .fmsmoov.GainSetResponse gain_set = 4;
    case kGainSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsp_oneof_.gain_set_);
      break;
    }
    // .fmsmoov.GainGetResponse gain_get = 5;
    case kGainGet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsp_oneof_.gain_get_);
      break;
    }
    case RSP_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessorResponse::GetClassData() const { return &_class_data_; }

void ProcessorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessorResponse *>(to)->MergeFrom(
      static_cast<const ProcessorResponse &>(from));
}


void ProcessorResponse::MergeFrom(const ProcessorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fmsmoov.ProcessorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_response_msg().empty()) {
    _internal_set_response_msg(from._internal_response_msg());
  }
  if (from._internal_response() != 0) {
    _internal_set_response(from._internal_response());
  }
  switch (from.rsp_oneof_case()) {
    case kShutdown: {
      _internal_mutable_shutdown()->::fmsmoov::ShutdownResponse::MergeFrom(from._internal_shutdown());
      break;
    }
    case kGainSet: {
      _internal_mutable_gain_set()->::fmsmoov::GainSetResponse::MergeFrom(from._internal_gain_set());
      break;
    }
    case kGainGet: {
      _internal_mutable_gain_get()->::fmsmoov::GainGetResponse::MergeFrom(from._internal_gain_get());
      break;
    }
    case RSP_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessorResponse::CopyFrom(const ProcessorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fmsmoov.ProcessorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorResponse::IsInitialized() const {
  return true;
}

void ProcessorResponse::InternalSwap(ProcessorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &response_msg_, GetArenaForAllocation(),
      &other->response_msg_, other->GetArenaForAllocation()
  );
  swap(response_, other->response_);
  swap(rsp_oneof_, other->rsp_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fmsmoov_2eproto_getter, &descriptor_table_fmsmoov_2eproto_once,
      file_level_metadata_fmsmoov_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fmsmoov
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fmsmoov::GainPair* Arena::CreateMaybeMessage< ::fmsmoov::GainPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::GainPair >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::ProcessorLiveData* Arena::CreateMaybeMessage< ::fmsmoov::ProcessorLiveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::ProcessorLiveData >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::ShutdownCommand* Arena::CreateMaybeMessage< ::fmsmoov::ShutdownCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::ShutdownCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::ShutdownResponse* Arena::CreateMaybeMessage< ::fmsmoov::ShutdownResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::ShutdownResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::GainSetCommand* Arena::CreateMaybeMessage< ::fmsmoov::GainSetCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::GainSetCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::GainSetResponse* Arena::CreateMaybeMessage< ::fmsmoov::GainSetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::GainSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::GainGetCommand* Arena::CreateMaybeMessage< ::fmsmoov::GainGetCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::GainGetCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::GainGetResponse* Arena::CreateMaybeMessage< ::fmsmoov::GainGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::GainGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::ProcessorCommand* Arena::CreateMaybeMessage< ::fmsmoov::ProcessorCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::ProcessorCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::fmsmoov::ProcessorResponse* Arena::CreateMaybeMessage< ::fmsmoov::ProcessorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fmsmoov::ProcessorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
